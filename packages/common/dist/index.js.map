{"version":3,"sources":["../src/index.ts","../src/finance/cryptocurrency/coingecko/index.ts","../src/finance/helpers/averageGain.ts","../src/finance/helpers/averageLoss.ts","../src/math/average/index.ts","../src/math/percentageChange.ts","../src/math/percentageDifference.ts","../src/math/whatPercentOfXisY.ts","../src/finance/helpers/sma.ts","../src/finance/helpers/sd.ts","../src/finance/helpers/bollinger.ts","../src/finance/helpers/currency.ts","../src/finance/helpers/ema.ts","../src/finance/helpers/fibonacci.ts","../src/finance/helpers/macd.ts","../src/finance/helpers/rsi.ts","../src/helpers/flatten/index.ts","../src/helpers/isNegative.ts","../src/helpers/isNumeric.ts","../src/helpers/logger.ts","../src/helpers/mapAsync.ts","../src/helpers/array.ts","../src/finance/cryptocurrency/helpers/helpers.ts","../src/finance/forex/index.ts"],"sourcesContent":["export * from \"./finance\";\nexport * from \"./math\";\nexport * from \"./helpers\";\n","/**\n *\n * @param name of cryptocurrency\n * @param days how many days to fetch price data for\n * @returns (string | number)[] array of prices sorted newest last\n */\nexport const fetchCryptoPriceHistory = (name: string, days: number) =>\n  fetch(\n    `https://api.coingecko.com/api/v3/coins/${name}/market_chart?vs_currency=aud&days=max&interval=daily`\n  )\n    .then((data) => data.json())\n    .then(({ prices }) =>\n      prices\n        .slice(days)\n        .map((item: [timestamp: string, price: string][]) => item[1])\n    );\n\n/**\n * @example\n * @description get bitcoins 200d SMA\n * fetchCryptoPriceHistory(\"bitcoin\", -200)\n * .then(findSimpleMovingAverage)\n * .then(console.log);\n */\n","// Calculate the average gain over a given number of days\n// avgGain = totalGain / numDays\nexport function calculateAverageGain(prices: number[], days: number): number {\n  // Extract the first days prices from the prices array\n  const gainPrices = prices.slice(0, days);\n  // Initialize the total gain and the number of days for which there is gain data\n  let totalGain = 0;\n  let numDays = 0;\n\n  // Loop through the `gainPrices` array and compare each price to the next price in the `prices` array\n  gainPrices.forEach((currentPrice, index) => {\n    const nextPrice = prices[index + 1];\n\n    // If there is gain data for this day, add it to the total gain and increment the number of days\n    if (nextPrice && currentPrice > nextPrice) {\n      totalGain += currentPrice - nextPrice;\n      numDays++;\n    }\n  });\n\n  // Check if there are any days for which there is gain data\n  if (numDays === 0) {\n    // Return 1 if there are no days with gain data\n    return 1;\n  } else {\n    // Return the average gain by dividing the total gain by the number of days\n    return totalGain / numDays;\n  }\n}\n","// Calculate the average loss over a given number of days\n// averageLoss = (loss1 + loss2 + ... + lossN) / N\nexport function calculateAverageLoss(prices: number[], days: number): number {\n  // Check if the array of prices is empty\n  if (prices.length === 0) {\n    return 0;\n  }\n  // If the number of days is greater than the number of prices, use the number of prices as the number of days\n  if (days > prices.length) {\n    days = prices.length;\n  }\n\n  // Extract the first `days` prices from the `prices` array\n  const lossPrices = prices.slice(0, days);\n\n  // Initialize the total loss and the number of days for which there is loss data\n  let totalLoss = 0;\n  let numDays = 0;\n\n  // Loop through the `lossPrices` array and compare each price to the next price in the `prices` array\n  lossPrices.forEach((currentPrice, index) => {\n    const nextPrice = prices[index + 1];\n\n    // If there is loss data for this day, add it to the total loss and increment the number of days\n    if (nextPrice && currentPrice > nextPrice) {\n      totalLoss += currentPrice - nextPrice;\n      numDays++;\n    }\n  });\n\n  // If there are no days with loss data, return 0\n  if (numDays === 0) {\n    return 0;\n  }\n\n  // Return the average loss by dividing the total loss by the number of days\n  return totalLoss / numDays;\n}\n","/** Arithmetic mean or Average */\nexport function average(array: number[]) {\n  return array.reduce((prev, next) => prev + next, 0) / array.length;\n}\n","/**\n * Percentage change identifies the percentage\n * between the two numbers\n */\nexport function percentageChange(initialValue: number, finalValue: number) {\n  return ((finalValue - initialValue) / initialValue) * 100;\n}\n","/**\n * Percentage difference seeks to understand\n * the percentage of the difference when compared to\n * the average between two numbers.\n *\n * When to use? When there is no obvious way of choosing\n * which value is the \"reference\" value.\n */\nexport function percentageDifference(value1: number, value2: number) {\n  const range = value2 - value1;\n  const average = (value2 + value1) / 2;\n  return (range / average) * 100;\n}\n","export const whatPercentOfXIsY = (x: number, y: number) => (x / y) * 100;\n","import { average } from \"../../math\";\n\n// Calculate the simple moving average (SMA) for an array of prices over a given number of days\nexport function calculateSMA(prices: number[], days: number): number {\n  // Extract the first `days` prices from the `prices` array\n  const smaPrices = prices.slice(0, days);\n\n  // Calculate the SMA by averaging the `smaPrices`\n  return average(smaPrices);\n}\n","import { calculateSMA } from \"./sma\";\n\n// Calculate the standard deviation of an array of prices's prices over a given number of days\nexport function calculateStandardDeviation(\n  prices: number[],\n  days: number\n): number {\n  // Calculate the SMA of then array of prices's prices over the past `days` days\n  const sma = calculateSMA(prices, days);\n\n  // Initialize the sum of squared differences\n  let sumSquaredDifferences = 0;\n\n  // Loop through the past `days` days of price data using the `forEach` method\n  prices.forEach((price) => {\n    // Add the squared difference between the current price and the SMA to the sum of squared differences\n    sumSquaredDifferences += (price - sma) ** 2;\n  });\n\n  // Return the standard deviation by taking the square root of the average squared difference\n  return Math.sqrt(sumSquaredDifferences / days);\n}\n","import { calculateStandardDeviation } from \"./sd\";\nimport { calculateSMA } from \"./sma\";\n\n// Bollinger bands: These are bands plotted two standard deviations away from a cryptocurrency's simple moving average (SMA), which can be used to identify overbought and oversold conditions. When the price of a cryptocurrency reaches the upper Bollinger band, it may be overbought and a potential selling opportunity, while when it reaches the lower Bollinger band, it may be oversold and a potential buying opportunity.\nexport function calculateBollingerBands(prices: number[]): {\n  upper: number;\n  lower: number;\n} {\n  // Calculate the 20-day simple moving average (SMA) of then array of prices's prices\n  const sma = calculateSMA(prices, 20);\n\n  // Calculate the standard deviation of then array of prices's prices over the past 20 days\n  const standardDeviation = calculateStandardDeviation(prices, 20);\n\n  // Calculate the upper and lower Bollinger bands by adding and subtracting twice the standard deviation from the SMA\n  return {\n    upper: sma + 2 * standardDeviation,\n    lower: sma - 2 * standardDeviation,\n  };\n}\n","import { ExchangeRates } from \"../../finance/forex\";\nimport currency from \"currency.js\";\nimport Prisma from \"database\";\n\n/** =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= */\n\n/** currency but automatic transformation */\n// rome-ignore lint/suspicious/noExplicitAny: <explanation>\nexport const money = (value?: any) => currency(String(value));\n\n/** =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= */\n\n// Calculate the simple moving average of an input array\nexport function findSimpleMovingAverage(inputArray: (string | number)[]) {\n  // Check if the input array exists\n  if (!inputArray) {\n    return 0;\n  }\n\n  // Convert all elements in the input array to numbers and sum them\n  const sum = inputArray.reduce(\n    (accumulator: number, nextValue: string | number) =>\n      accumulator + Number(nextValue),\n    0\n  );\n\n  // Divide the sum by the length of the input array to find the average\n  return sum / inputArray.length;\n}\n\n/** =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= */\n\nexport function getConversionRate(\n  rates: { [key: string]: string },\n  fromCurrency: string,\n  toCurrency: string\n): { value: string; error?: string } {\n  const fromRate = rates[fromCurrency];\n  const toRate = rates[toCurrency];\n\n  if (!fromRate) {\n    return { value: \"0\", error: `Invalid from currency: ${fromCurrency}` };\n  }\n\n  if (!toRate) {\n    return { value: \"0\", error: `Invalid to currency: ${toCurrency}` };\n  }\n\n  return { value: currency(toRate).divide(fromRate).toString() };\n}\n\n/** =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-= */\n\nexport function convertCurrency({\n  exchangeRates,\n  fromCurrency,\n  toCurrency,\n  amount,\n}: {\n  exchangeRates: ExchangeRates;\n  fromCurrency: string;\n  toCurrency: string;\n  amount?: string;\n}): currency {\n  // get the conversion rate using the provided exchange rates and currencies\n  const { value: conversionRate } = getConversionRate(\n    exchangeRates,\n    fromCurrency,\n    toCurrency\n  );\n\n  // multiply the amount by the conversion rate and return the result\n  return money(amount).multiply(conversionRate);\n}\n","import { average } from \"../../math\";\n\n/**\n * Exponential Moving Average\n * The standard exponential moving average formula\n * converts the time to a fraction\n * EMA% = 2/(n + 1) where n is the number of days\n * For example, the EMA% for 14 days is 2/(14 days +1) = 13.3%.\n */\nexport function calculateEMA(prices: number[], days: number): number {\n  // Calculate the weighting multiplier\n  const multiplier = 2 / (days + 1);\n\n  // Initialize the EMA with the average of the first `days` prices\n  let ema = average(prices.slice(0, days));\n\n  // Use a forEach loop to iterate over the remaining prices\n  prices.slice(days).forEach((price) => {\n    // Update the EMA using the current price and the weighting multiplier\n    ema = (price - ema) * multiplier + ema;\n  });\n\n  // Return the EMA\n  return ema;\n}\n","export function calculateFibonacciResistance(prices: number[]): number | null {\n  // Return 0 if the array is empty\n  if (prices.length === 0) {\n    return 0;\n  }\n\n  // Find the highest and lowest prices in the array\n  const highestPrice = Math.max(...prices);\n  const lowestPrice = Math.min(...prices);\n\n  // Calculate the Fibonacci retracement levels\n  const fibonacciLevels = [\n    lowestPrice + (highestPrice - lowestPrice) * 0.236,\n    lowestPrice + (highestPrice - lowestPrice) * 0.382,\n    lowestPrice + (highestPrice - lowestPrice) * 0.5,\n    lowestPrice + (highestPrice - lowestPrice) * 0.618,\n    lowestPrice + (highestPrice - lowestPrice) * 0.786,\n  ];\n\n  // The resistance level is the highest Fibonacci level\n  return Math.max(...fibonacciLevels);\n}\n","import { calculateEMA } from \"./ema\";\n\n// Moving average convergence divergence (MACD): This is a trend-following momentum indicator that shows the relationship between two moving averages of a cryptocurrency's price. By comparing the MACD to a signal line, you can identify whether a cryptocurrency is trending upwards or downwards and use this information to inform your buying or selling decisions.\nexport function calculateMACD(prices: number[]): number {\n  // Calculate the 26-day and 12-day exponential moving averages (EMAs) of then array of prices's prices\n  const ema26 = calculateEMA(prices, 26);\n  const ema12 = calculateEMA(prices, 12);\n\n  // Subtract the 12-day EMA from the 26-day EMA to get the MACD\n  return ema26 - ema12;\n}\n","import { calculateAverageGain } from \"./averageGain\";\nimport { calculateAverageLoss } from \"./averageLoss\";\n\n// RSI = 100 - 100 / (1 + (average gain / average loss))\n\nexport function calculateRSI(prices: number[]): number {\n  // Calculate the average gain and average loss over the past 14 days\n  const averageGain = calculateAverageGain(prices, 14);\n  const averageLoss = calculateAverageLoss(prices, 14);\n\n  // Use the average gain and loss to calculate the relative strength\n  const relativeStrength = averageGain / averageLoss;\n\n  // Use the relative strength to calculate the RSI\n  return 100 - 100 / (1 + relativeStrength);\n}\n","/**\n * Flattens an object by moving all keys from nested objects to the top level of the output object.\n * @param object The object to flatten.\n * @returns A flattened version of the input object.\n */\n\n// rome-ignore lint/suspicious/noExplicitAny: <explanation>\nexport function flat(obj: any): Record<string, unknown> {\n  const result = new Map();\n\n  // rome-ignore lint/suspicious/noExplicitAny: <explanation>\n  function flatten(obj: any, prefix = \"\") {\n    for (const [key, value] of Object.entries(obj)) {\n      if (typeof value === \"object\") {\n        flatten(value, `${prefix}${key}.`);\n      } else {\n        result.set(prefix + key, value);\n      }\n    }\n  }\n\n  flatten(obj);\n  return Object.fromEntries(result);\n}\n","// rome-ignore lint/suspicious/noExplicitAny: <explanation>\nexport const isNegative = (number?: any) => Math.sign(Number(number)) === -1;\n","export const isNumeric = (value: string | number): boolean =>\n  value != null && value !== \"\" && !isNaN(Number(value.toString()));\n","export type LogType = \"info\" | \"warn\" | \"error\" | \"trace\" | \"debug\";\n\nexport const isDev = process.env.NODE_ENV === \"development\";\n\nexport const isClient = !(typeof process === \"object\");\n\n// If client and in development environment\nexport const isDebug = () => isDev && isClient;\n\nexport const logger = (() => {\n  const customLogText = `%c ${isClient ? \"CLIENT\" : \"SERVER\"}:`;\n  const print = (type: LogType, ...messages: unknown[]) => {\n    // If logs enabled in .env or in development mode\n    if (process.env.NEXT_PUBLIC_LOGS_ENABLED || isDev) {\n      switch (type) {\n        case \"info\":\n          console.info(\n            customLogText,\n            \"background: #4299E1; color: #000000;\",\n            ...messages\n          );\n          break;\n        case \"warn\":\n          console.warn(\n            customLogText,\n            \"background: #ED8936; color: #000000;\",\n            ...messages\n          );\n          break;\n        case \"error\":\n          console.error(\n            `${customLogText}❌`,\n            \"background: #F56565; color: #000000;\",\n            ...messages\n          );\n          break;\n        case \"trace\":\n          console.trace(\n            customLogText,\n            \"background: #A0AEC0; color: #000000;\",\n            ...messages\n          );\n          break;\n        case \"debug\":\n        default:\n          console.log(\n            customLogText,\n            \"background: #48BB78; color: #000000;\",\n            ...messages\n          );\n      }\n    }\n  };\n\n  return {\n    debug: print.bind(null, \"debug\"),\n    info: print.bind(null, \"info\"),\n    warn: print.bind(null, \"warn\"),\n    error: print.bind(null, \"error\"),\n    trace: print.bind(null, \"trace\"),\n  };\n})();\n\nexport const timeStamp = (...args: unknown[]) => {\n  logger.info(`[${new Date().toISOString().slice(11, 23)}] -`, ...args);\n};\n\nexport const debugLog = (...args: unknown[]) => {\n  if (process.env.DEBUG === \"1\") {\n    timeStamp(...args);\n  }\n};\n","export const mapAsync = async (array: unknown[], callbackfn: () => void) =>\n  Promise.all(array.map(callbackfn));\n\nexport const flattenArrToObj = (\n  // rome-ignore lint/suspicious/noExplicitAny: <explanation>\n  arr: Record<string, any>[],\n  key: string | number,\n  value: string\n) =>\n  arr.reduce(\n    (acc, val) => ({\n      ...acc,\n      [`${val[key]}`]: val[value],\n    }),\n    {}\n  );\n","import currency from \"currency.js\";\n\n/**\n * sumArrayByKey function takes an array of objects, a key to use for summing values, and an optional precision parameter\n */\nexport function sumArrayByKey(\n  // rome-ignore lint/suspicious/noExplicitAny: <explanation>\n  input: Record<string, any>[],\n  key: string,\n  precision = 2\n) {\n  // the function uses the reduce method to sum the values in the array using the specified key, and returns the result as a string\n  return input\n    .reduce(\n      (acc, next) => acc.add(currency(next[key], { precision: precision })),\n      currency(0, { precision: precision })\n    )\n    .toString();\n}\n","import { ExchangeRates } from \"../../../finance/forex\";\nimport { convertCurrency, money } from \"../../../finance/helpers\";\nimport { sumArrayByKey } from \"../../../helpers\";\nimport { Cryptocurrency, Market } from \"database/generated/prisma-client\";\n\nexport type CryptoComplete = Cryptocurrency & {\n  user?: {\n    settings: {\n      userCurrency: string;\n    } | null;\n  };\n  market?: Market | null;\n  Children: CryptoCompleteChild[];\n};\n\nexport type CryptoCompleteChild = Cryptocurrency & {\n  user?: {\n    settings: {\n      userCurrency: string;\n    } | null;\n  };\n  market?: Market | null;\n};\n\n// Remove nested children\ntype ChildrenOmitChildren = Omit<CryptoComplete, \"Children\">;\n\n/** Extends cryptocurrency type with all relations */\nexport interface CryptoAndChildrenComplete\n  extends Omit<CryptoComplete, \"Children\"> {\n  // Re add children without nesting\n  Children?: ChildrenOmitChildren[];\n}\n\n/** =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */\n// TODO break all of these into their own files\n/** =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */\n\ntype CryptoOmitCostBasisAndChildren = Omit<\n  CryptoComplete,\n  \"costBasis\" | \"Children\"\n>;\n\n/** Calculated values */\ninterface CryptoSummaryOutput extends CryptoOmitCostBasisAndChildren {\n  unrealisedGainPercentage: string;\n  estimatedStakingYield: string;\n  estimatedYearlyReturn: string;\n  belowTargetBalance: boolean;\n  unrealisedGain: string;\n  saleableValue: string;\n  amountStaked: string;\n  averageCost: string;\n  costBasis: string;\n  shouldSell: boolean;\n  Children?: CryptoOmitCostBasisAndChildren[];\n  saleable: string;\n  value: string;\n  price: string;\n}\n\nexport function calculateCryptoSummary(\n  crypto: ChildrenOmitChildren,\n  exchangeRates: ExchangeRates,\n  toCurrency = \"usd\"\n): CryptoSummaryOutput {\n  const price = convertCurrency({\n    exchangeRates,\n    fromCurrency: crypto?.market?.currency || crypto.currency,\n    toCurrency: toCurrency,\n    amount: crypto?.market?.price.toString(),\n  });\n\n  const costBasis = convertCurrency({\n    exchangeRates,\n    fromCurrency: crypto.currency,\n    toCurrency: toCurrency,\n    amount: crypto.costBasis.toString(),\n  });\n\n  /** Basic stats */\n  const balance = money(crypto?.balance);\n  const targetBalance = money(crypto.targetBalance);\n\n  const value = balance.multiply(price);\n  const unrealisedGain = value.subtract(costBasis);\n  const unrealisedGainPercentage = Number.isNaN(\n    unrealisedGain.divide(costBasis).value\n  )\n    ? \"0\"\n    : unrealisedGain.divide(costBasis);\n  const averageCost = costBasis.divide(balance);\n  /** Liquid assets */\n  const saleable = balance.subtract(targetBalance);\n  const saleableValue = saleable.multiply(price);\n  /** Income */\n  const estimatedStakingYield = money(crypto.rateOfIncome)\n    .multiply(money(crypto.interestBearingBalance))\n    .divide(100);\n  const estimatedYearlyReturn = estimatedStakingYield.multiply(price);\n  const amountStaked = money(crypto.interestBearingBalance);\n  /** Suggestions */\n  const belowTargetBalance = saleable.intValue < targetBalance.intValue;\n  const shouldSell = averageCost < price;\n\n  return {\n    ...crypto,\n    shouldSell,\n    belowTargetBalance,\n    value: value.toString(),\n    price: price.toString(),\n    currency: toCurrency,\n    saleable: saleable.toString(),\n    costBasis: costBasis.toString(),\n    averageCost: averageCost.toString(),\n    amountStaked: amountStaked.toString(),\n    saleableValue: saleableValue.toString(),\n    unrealisedGain: unrealisedGain.toString(),\n    estimatedYearlyReturn: estimatedYearlyReturn.toString(),\n    estimatedStakingYield: estimatedStakingYield.toString(),\n    unrealisedGainPercentage: unrealisedGainPercentage.toString(),\n  };\n}\n\n/** =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */\n\ninterface NestedAccountTotals {\n  value: string;\n  Children: CryptoSummaryOutput[];\n  averageCost: string;\n  costBasis: string;\n  saleableValue: string;\n  unrealisedGain: string;\n  unrealisedGainPercentage: string;\n}\n\nfunction calculateNestedAccountTotals(\n  Children: CryptoSummaryOutput[]\n): NestedAccountTotals {\n  const unrealisedGain = sumArrayByKey(Children, \"unrealisedGain\");\n  const unrealisedGainPercentage = sumArrayByKey(\n    Children,\n    \"unrealisedGainPercentage\"\n  );\n  // Average cost doesn't need to be known on sub accounts?\n  const averageCost = \"0.00\";\n  const costBasis = sumArrayByKey(Children, \"costBasis\");\n  const value = sumArrayByKey(Children, \"value\");\n  const saleableValue = sumArrayByKey(Children, \"saleableValue\");\n\n  return {\n    value,\n    Children,\n    averageCost,\n    costBasis,\n    saleableValue,\n    unrealisedGain,\n    unrealisedGainPercentage,\n  };\n}\n\n/** =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */\n\ninterface CalculateOneCryptoInput {\n  crypto: CryptoComplete;\n  exchangeRates: ExchangeRates;\n  userCurrency: string;\n}\n\nexport function calculateOneCrypto({\n  crypto,\n  exchangeRates,\n  userCurrency,\n}: CalculateOneCryptoInput): CryptoSummaryOutput {\n  /**\n   * Calculate the summary for the main crypto account\n   */\n  const finalData = calculateCryptoSummary(crypto, exchangeRates, userCurrency);\n\n  /**\n   * Calculate the summary for any children crypto accounts\n   * Mainly applicable to sub accounts like exchanges\n   */\n  const Children = crypto.Children?.map((child) =>\n    calculateCryptoSummary(child, exchangeRates, userCurrency)\n  );\n\n  /** Calculate totals for nested accounts */\n  if (Children !== undefined && Children.length > 0) {\n    return {\n      ...finalData,\n      ...calculateNestedAccountTotals(Children),\n    };\n  }\n\n  return finalData;\n}\n\n/** =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */\n\ninterface CryptoSummaryInput {\n  data: CryptoComplete[];\n  exchangeRates: ExchangeRates;\n  userCurrency: string;\n}\n\nexport function calculateManyCrypto({\n  data,\n  userCurrency,\n  exchangeRates,\n}: CryptoSummaryInput) {\n  return data.map((crypto) =>\n    calculateOneCrypto({ crypto, userCurrency, exchangeRates })\n  );\n}\n\n/** =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */\n\nexport function calculateCryptoOverview({\n  data,\n}: {\n  data: CryptoSummaryOutput[];\n}) {\n  /** Calculate Overview totals */\n\n  const totalValue = sumArrayByKey(data, \"value\");\n\n  const totalCostBasis = sumArrayByKey(data, \"costBasis\");\n\n  const unrealisedGain = money(totalValue).subtract(totalCostBasis);\n\n  const saleableValue = sumArrayByKey(data, \"saleableValue\");\n\n  const totalEstimatedYearlyReturn = sumArrayByKey(\n    data,\n    \"estimatedYearlyReturn\"\n  );\n\n  return {\n    totalValue,\n    saleableValue,\n    totalCostBasis,\n    unrealisedGain,\n    totalEstimatedYearlyReturn,\n  };\n}\n\n/** =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=- */\n\nexport function calculateCryptoIncome() {\n  return console.log(\"TODO: calculate income summary\");\n}\n","import { Decimal } from \"database/generated/prisma-client/runtime\";\nimport { flattenArrToObj } from \"../../helpers\";\n\nexport type ExchangeRates = { [x: string]: string };\n\ntype GetExchangeRatesInput = {\n  price: Decimal;\n  currency: string;\n  name: string;\n  ticker: string;\n};\n\nexport const getExchangeRates = (\n  markets: GetExchangeRatesInput[]\n): ExchangeRates => {\n  const market = markets?.map(({ price, ...rest }) => {\n    return {\n      ...rest,\n      price: price.toString(),\n    };\n  });\n  return flattenArrToObj(market, \"ticker\", \"price\");\n};\n"],"mappings":"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","names":["average","currency","obj","import_currency","currency"]}