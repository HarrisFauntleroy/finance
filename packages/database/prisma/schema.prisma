datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma-client"
}

generator zod {
  provider = "zod-prisma-types"
}

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// USER
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("user_accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  image              String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
  deleted            Boolean             @default(false)
  deletedAt          DateTime?
  role               Role                @default(USER)
  accounts           Account[]
  budgets            Budget[]
  budgetTransactions BudgetTransaction[]
  assets             Asset[]
  assetTransactions  AssetTransaction[]
  cryptocurrency     Cryptocurrency[]
  sessions           Session[]
  settings           Settings?
  portfolioSnapshot  PortfolioSnapshot[]
  CryptoSnapshot     CryptoSnapshot[]
  CashSnapshot       CashSnapshot[]
  PropertySnapshot   PropertySnapshot[]
  SecuritySnapshot   SecuritySnapshot[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("user_jwt")
}

model Settings {
  id                   String       @id @unique @default(cuid())
  userId               String       @unique
  preferredColorScheme ColorScheme? @default(LIGHT)
  userCurrency         String       @default("aud")
  userLanguage         String       @default("eng")
  user                 User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @default(now()) @updatedAt
  deleted              Boolean      @default(false)
  deletedAt            DateTime?

  @@unique([id, userId])
  @@map("user_settings")
}

enum ColorScheme {
  LIGHT
  DARK
  TBA

  @@map("user_color_scheme")
}

enum Role {
  USER
  ADMIN

  @@map("user_role")
}

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// LOGS 
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

model Log {
  id        String    @id @unique @default(cuid())
  type      LogType
  message   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime?
}

enum LogType {
  info
  warn
  error
  trace
  debug
}

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// BUDGETS 
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

model Income {
  id             String    @id @unique @default(cuid())
  name           String
  payFrequency   String
  grossAmount    String
  grossFrequency String    @default("P1Y0M0DT0H0M0S")
  userId         String
  budget         Budget    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  deleted        Boolean   @default(false)
  deletedAt      DateTime?
}

model Budget {
  id           String           @unique @default(cuid())
  name         String
  userId       String
  user         User             @relation(fields: [userId], references: [id])
  envelopes    BudgetEnvelope[]
  income       Income[]
  totalBalance String           @default("0")
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
  deleted      Boolean          @default(false)
  deletedAt    DateTime?
}

model BudgetEnvelope {
  id              String              @id @unique @default(cuid())
  budgetId        String
  name            String
  budget          Budget              @relation(fields: [budgetId], references: [id])
  transactions    BudgetTransaction[]
  remainingAmount String              @default("0")
  totalAmount     String              @default("0")
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @default(now()) @updatedAt
  deleted         Boolean             @default(false)
  deletedAt       DateTime?
}

model BudgetTransaction {
  id                  String    @id @unique @default(cuid())
  // The time when the transaction was made
  // ISO-8601 format
  timestamp           DateTime
  // The price of a single unit of the asset being bought or sold
  pricePerUnit        String    @default("0")
  // The settlement currency in which the pricePerUnit is denominated
  // ISO-4217 format
  baseCurrency        String
  // The number of units of the asset being bought or sold
  quantity            String    @default("0")
  // The number of units of the asset that have been filled in the transaction
  // (optional field, may not be applicable to all transactions)
  quantityFilled      String?
  // The fee associated with the transaction in the base currency
  fee                 String    @default("0")
  // The total value of the transaction in the base currency
  valueInBaseCurrency String    @default("0")
  // The asset being sold in the transaction)
  fromAsset           String?
  // The asset being bought in the transaction
  // (optional field, may not be applicable to all 
  toAsset             String
  // The market in which the transaction took place
  market              String
  // The type of transaction (e.g. "buy", "sell", "referral_card_cashback")
  transactionType     String
  // The expiration time of the transaction, if applicable
  // ISO-8601 format
  expiry              DateTime?
  // The current status of the transaction (e.g. "filled", "cancelled")
  status              String
  // A unique identifier for the transaction
  transactionHash     String
  // A description of the transaction
  description         String
  // A memo associated with the transaction
  memo                String

  // Attached image
  imageUrl  String?
  imageName String?
  imageId   String?

  // A unique identifier for the order associated with the transaction. This could be useful for tracking and linking related transactions (e.g. multiple fills of a single order).
  // orderId   String?

  // The type of order associated with the transaction (e.g. "market", "limit", "stop"). This can be useful for understanding the conditions under which the transaction was made.
  // orderType String?

  // The limit price of a limit order, if applicable. This can be useful for understanding the conditions under which the order was placed and for determining whether the order was filled at the desired price.
  // limitPrice String?

  budgetEnvelopeId String?
  budgetEnvelope   BudgetEnvelope? @relation(fields: [budgetEnvelopeId], references: [id])
  user             User            @relation(fields: [userId], references: [id])
  userId           String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime?
}

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// ASSETS 
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

// You can use the term "financial asset" or "financial instrument" to refer to something that may be either an asset or a liability. These terms are commonly used in accounting and finance to refer to items that have a monetary value and can be used to measure, recognize, and record transactions or events. Financial assets may include cash, investments, or other assets that can be easily converted into cash, while financial liabilities may include debts or obligations that are owed to others.

// EG 
// const assets = await prisma.item.findMany({
//   where: {
//     type: CustomAssetCategory.CRYPTOCURRENCY,
//     labels: {
//       some: {
//         name: "MyLabel",
//       },
//     },
//   },
//   orderBy: {
//     createdAt: "asc",
//   },
// })

// const liabilities = await prisma.item.findMany({
//   where: {
//     type: LiabilityCategory.MORTGAGE,
//     labels: {
//       some: {
//         name: "MyLabel",
//       },
//     },
//   },
//   orderBy: {
//     createdAt: "asc",
//   },
// })

// const customAssets = await prisma.item.findMany({
//   where: {
//     type: CustomAssetCategory.CUSTOM,
//     customCategory: {
//       name: "MyCustomCategory",
//     },
//   },
//   orderBy: {
//     createdAt: "asc",
//   },
// })

enum Category {
  LOAN // represents a liability
  CASH // represents an asset
  CUSTOM // represents a custom asset or liability
  MORTGAGE
  PROPERTY
  INVESTMENT
  CREDIT
  CRYPTOCURRENCY
  SUPERANNUATION
}

model CustomAssetCategory {
  id        String    @id @default(cuid())
  name      String
  icon      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime?
  assets    Asset[]
}

model AssetLabel {
  id        String    @id @default(cuid())
  name      String
  icon      String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime?
  asset     Asset?    @relation(fields: [assetId], references: [id])
  assetId   String?
}

model Asset {
  id                     String  @id @default(cuid())
  // The name of the asset, such as "Bitcoin" or "Tesla Stock"
  name                   String
  institution            String?
  // The currency that the asset is denominated in, such as "USD" or "EUR"
  currency               String
  // Credentials used to access data from an external API, such as an exchange's API.
  apiKey                 String?
  apiSecret              String?
  // The address of the wallet where the asset is stored, if applicable.
  walletAddress          String?
  // The balance of the asset, for example the number of shares or tokens that the user owns.
  balance                String  @default("0")
  // The total cost of purchasing the asset, including any fees or expenses.
  costBasis              String  @default("0")
  // The profit or loss from the sale of the asset, calculated as the sale price minus the cost basis.
  realisedGain           String  @default("0")
  // The desired balance of the asset, for example the number of shares or tokens that the user wants to own.
  targetBalance          String?
  // The balance of the asset that earns interest, for example a savings account balance.
  interestBearingBalance String?
  // The income rate of the asset, for example the annual percentage rate of a savings account.
  incomeRate             String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  deleted   Boolean            @default(false)
  deletedAt DateTime?
  // An enumeration that represents the connection of the asset to an external account.
  account   AccountConnection?
  // An array of labels that can be used to classify the asset, such as "personal" or "business"
  labels    AssetLabel[]

  category       Category?
  categoryId     String?
  // Reference to the category of the asset, for example "Cryptocurrency" or "Stock"
  customCategory CustomAssetCategory? @relation(fields: [categoryId], references: [id])

  // Connection to market data for crypto, stock, metal prices etc.
  marketId String?
  market   Market? @relation(fields: [marketId], references: [id], onDelete: NoAction)

  // If the asset is a sub-asset, it will have a parent asset, these fields represent the parent asset
  parentId     String?
  parent       Asset?             @relation("subAssets", fields: [parentId], references: [id])
  subAssets    Asset[]            @relation("subAssets")
  transactions AssetTransaction[]

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  status AssetStatus? @default(ACTIVE)
}

enum AssetStatus {
  CONNECTED
  CONNECTION_FAILED
  DISCONNECTED
  PENDING_CONNECTION
  ERROR
  UNAUTHORIZED
  MAINTENANCE
  BLOCKED
  UNKNOWN
  ACTIVE
  INACTIVE
}

model AssetTransaction {
  id                  String    @id @unique @default(cuid())
  // The time when the transaction was made
  // ISO-8601 format
  timestamp           DateTime?
  // The price of a single unit of the asset being bought or sold
  pricePerUnit        String?
  // The settlement currency in which the pricePerUnit is denominated
  // ISO-4217 format
  baseCurrency        String
  // The number of units of the asset being bought or sold
  quantity            String
  // The number of units of the asset that have been filled in the transaction
  // (optional field, may not be applicable to all transactions)
  quantityFilled      String?
  // The fee associated with the transaction in the base currency
  fee                 String?
  // The total value of the transaction in the base currency
  valueInBaseCurrency String?
  // The asset being sold in the transaction)
  fromAsset           String?
  // The asset being bought in the transaction
  // (optional field, may not be applicable to all 
  toAsset             String
  // The market in which the transaction took place
  market              String?
  // The type of transaction (e.g. "buy", "sell", "referral_card_cashback")
  transactionType     String
  // The expiration time of the transaction, if applicable
  // ISO-8601 format
  expiry              DateTime?
  // The current status of the transaction (e.g. "filled", "cancelled")
  status              String?
  // A unique identifier for the transaction
  transactionHash     String?
  // A description of the transaction
  description         String?
  // A memo associated with the transaction
  memo                String?

  // A unique identifier for the order associated with the transaction. This could be useful for tracking and linking related transactions (e.g. multiple fills of a single order).
  // orderId   String?

  // The type of order associated with the transaction (e.g. "market", "limit", "stop"). This can be useful for understanding the conditions under which the transaction was made.
  // orderType String?

  // The limit price of a limit order, if applicable. This can be useful for understanding the conditions under which the order was placed and for determining whether the order was filled at the desired price.
  // limitPrice String?

  relatedAssetId String?
  relatedAsset   Asset?  @relation(fields: [relatedAssetId], references: [id])
  user           User    @relation(fields: [userId], references: [id])
  userId         String

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime?
}

// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
// SNAPSHOTS - TODO: REFACTOR NEEDED 
// =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

model PortfolioSnapshot {
  id             String    @id @unique @default(cuid())
  currency       String
  totalValue     String
  costBasis      String
  unrealisedGain String
  realisedGain   String
  saleableValue  String
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  deleted        Boolean   @default(false)
  deletedAt      DateTime?

  @@unique([createdAt, userId])
}

model CryptoSnapshot {
  id             String    @id @unique @default(cuid())
  currency       String
  totalValue     String
  costBasis      String
  unrealisedGain String
  realisedGain   String
  saleableValue  String
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  deleted        Boolean   @default(false)
  deletedAt      DateTime?

  @@unique([createdAt, userId])
}

model CashSnapshot {
  id             String    @id @unique @default(cuid())
  currency       String
  totalValue     String
  costBasis      String
  unrealisedGain String
  realisedGain   String
  saleableValue  String
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  deleted        Boolean   @default(false)
  deletedAt      DateTime?

  @@unique([createdAt, userId])
}

model PropertySnapshot {
  id             String    @id @unique @default(cuid())
  currency       String
  totalValue     String
  costBasis      String
  unrealisedGain String
  realisedGain   String
  saleableValue  String
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  deleted        Boolean   @default(false)
  deletedAt      DateTime?

  @@unique([createdAt, userId])
}

model SecuritySnapshot {
  id             String    @id @unique @default(cuid())
  currency       String
  totalValue     String
  costBasis      String
  unrealisedGain String
  realisedGain   String
  saleableValue  String
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now()) @updatedAt
  deleted        Boolean   @default(false)
  deletedAt      DateTime?

  @@unique([createdAt, userId])
}

// EVERYTHING BELOW HERE SHOULD BE MERGED INTO THE ASSET SECTION AS ASSET SUPERCEDES CRYPTOCURRENCY 

model Cryptocurrency {
  id                     String             @id @unique @default(cuid())
  displayName            String
  currency               String             @default("usd")
  balance                String             @default("0")
  costBasis              String             @default("0")
  realisedGain           String             @default("0")
  apiKey                 String?
  apiSecret              String?
  walletAddress          String?
  targetBalance          String             @default("0")
  interestBearingBalance String             @default("0")
  incomeRate             String             @default("0")
  accountConnection      AccountConnection? @default(NONE)

  marketId  String?
  market    Market?          @relation(fields: [marketId], references: [id], onDelete: NoAction)
  parentId  String?
  parent    Cryptocurrency?  @relation("Cryptocurrency_Children", fields: [parentId], references: [id])
  Children  Cryptocurrency[] @relation("Cryptocurrency_Children")
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @default(now()) @updatedAt
  deleted   Boolean          @default(false)
  deletedAt DateTime?
}

enum MarketType {
  CRYPTOCURRENCY
  STOCK
  ETF
  METAL
  OTHER
  CASH
}

model Market {
  id                    String           @id @unique @default(cuid())
  name                  String?
  ticker                String
  description           String?
  currency              String
  price                 String?
  priceChange24h        String?
  priceChange24hPercent String?
  marketCap             String?
  marketCapRank         String?
  type                  MarketType
  image                 String?
  linked_assets         Asset[]
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @default(now()) @updatedAt
  deleted               Boolean          @default(false)
  deletedAt             DateTime?
  Cryptocurrency        Cryptocurrency[]

  @@unique([ticker, type])
}

enum AccountConnection {
  NONE
  SWYFTX
  COINSPOT
}
